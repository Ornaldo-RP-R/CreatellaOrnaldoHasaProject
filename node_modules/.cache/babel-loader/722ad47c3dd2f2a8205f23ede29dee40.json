{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asjan\\\\Desktop\\\\Creatella\\\\src\\\\components\\\\Pagination\\\\Pagination.component.jsx\";\nimport React from \"react\";\nimport \"./Pagination.styles.css\"; //I usually use Material ui Pagination also some other parts of it but since u wanted too see my javascript and skills  i made it by my own\n\nconst Pagination = ({\n  pages,\n  clickedPage,\n  onClickOfPage,\n  IncreasePageByThree,\n  IncreasePageByOne,\n  DecreasePageByOne,\n  DecreasePageByThree\n}) => {\n  //by geting pages(nr of pages) as attribute i put them in an array to use them for jsx pagination creation\n  let nrofpages = [];\n\n  for (let i = 0; i < pages; i++) {\n    nrofpages.push(i + 1);\n  }\n\n  let pageCount = 0;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Paginationpages Symbols\",\n    onClick: DecreasePageByThree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, \"\\xAB\"), /*#__PURE__*/React.createElement(\"div\", {\n    //some times for  small parts i usally make inline styles saves me a bit of time\n    className: \"Paginationpages Symbols Lite\",\n    style: {\n      position: \"relative\",\n      left: \"-1.5vw\"\n    },\n    onClick: DecreasePageByOne,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, \"<\"), nrofpages.map(page => {\n    //keep track of page number\n    pageCount++;\n    return nrofpages.length <= 10 ?\n    /*#__PURE__*/\n    //if pages are less than 10 i just want to display them all no need to pass on other conditions will ignore them all\n    React.createElement(\"div\", {\n      key: page,\n      className: `${clickedPage === page ? \"Paginationpages Numbers Clicked\" : \"Paginationpages Numbers\"}`,\n      id: page,\n      onClick: () => {\n        onClickOfPage(page);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, page) : // otherwise i want always to show page 1 2  and 3 becouse it will give user posibillity to go back to start\n    pageCount === 1 || pageCount === 2 || pageCount === 3 ? /*#__PURE__*/React.createElement(\"div\", {\n      key: page,\n      className: `${clickedPage === page ? \"Paginationpages Numbers Clicked\" : \"Paginationpages Numbers\"}`,\n      id: page,\n      onClick: () => {\n        onClickOfPage(page);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, page) : //then if clicked page is  greater than 6 i dont want to show page 4 and 5 but giving just some points that before those pages has some other pages\n    pageCount === 4 && clickedPage >= 6 || pageCount === 5 && clickedPage >= 6 ? /*#__PURE__*/React.createElement(\"div\", {\n      key: page,\n      className: \"Paginationpages Points\",\n      id: page,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, \".\") : //then if clicked page is one of last six pages i want that user get acces to page 10 and 11 by showing them\n    clickedPage + 6 >= nrofpages.length && (pageCount === 10 || pageCount === 11) ? /*#__PURE__*/React.createElement(\"div\", {\n      key: page,\n      className: `${clickedPage === page ? \"Paginationpages Numbers Clicked\" : \"Paginationpages Numbers\"}`,\n      id: page,\n      onClick: () => {\n        onClickOfPage(page);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, page) : //then if clicked page is one of last nine pages i want that user to dont see pages 12 and 13 to give them again\n    //the look that are some pages between those\n    //Puting points will make the list of pages smaller and every single page accesible by the user it just make sure that if it is big number pagination user has acces\n    //Only in some pages and he needs to click on some pages to see others (user will user have acces on first 3 pages last 4 pages and some pages after the clicked pages)\n    //So whenever he click a page he will have acces to see some next pages or he could easily go back or go at the end\n    clickedPage + 9 >= nrofpages.length && (pageCount === 12 || pageCount === 13) ? /*#__PURE__*/React.createElement(\"div\", {\n      key: page,\n      className: \"Paginationpages Points\",\n      id: page,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \".\") : // i make sure that everytime user see 4 last pages in order if he want to go to the end\n    pageCount + 3 >= nrofpages.length ? /*#__PURE__*/React.createElement(\"div\", {\n      key: page,\n      className: `${clickedPage === page ? \"Paginationpages Numbers Clicked\" : \"Paginationpages Numbers\"}`,\n      id: page,\n      onClick: () => {\n        onClickOfPage(page);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, page) : pageCount >= 7 + clickedPage && pageCount <= 8 + clickedPage ? /*#__PURE__*/React.createElement(\"div\", {\n      key: page,\n      className: \"Paginationpages Points\",\n      id: page,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, \".\") : pageCount <= 5 + clickedPage && pageCount + 2 >= clickedPage ? /*#__PURE__*/React.createElement(\"div\", {\n      key: page,\n      className: `${clickedPage === page ? \"Paginationpages Numbers Clicked\" : \"Paginationpages Numbers\"}`,\n      id: page,\n      onClick: () => {\n        onClickOfPage(page);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, page) : null;\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Paginationpages Symbols Lite\",\n    style: {\n      position: \"relative\",\n      left: \"1.5vw\"\n    },\n    onClick: IncreasePageByOne,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, \">\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Paginationpages Symbols\",\n    onClick: IncreasePageByThree,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, \"\\xBB\"));\n};\n\nexport default Pagination;","map":{"version":3,"sources":["C:/Users/asjan/Desktop/Creatella/src/components/Pagination/Pagination.component.jsx"],"names":["React","Pagination","pages","clickedPage","onClickOfPage","IncreasePageByThree","IncreasePageByOne","DecreasePageByOne","DecreasePageByThree","nrofpages","i","push","pageCount","position","left","map","page","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./Pagination.styles.css\";\r\n//I usually use Material ui Pagination also some other parts of it but since u wanted too see my javascript and skills  i made it by my own\r\nconst Pagination = ({\r\n  pages,\r\n  clickedPage,\r\n  onClickOfPage,\r\n  IncreasePageByThree,\r\n  IncreasePageByOne,\r\n  DecreasePageByOne,\r\n  DecreasePageByThree,\r\n}) => {\r\n  //by geting pages(nr of pages) as attribute i put them in an array to use them for jsx pagination creation\r\n  let nrofpages = [];\r\n  for (let i = 0; i < pages; i++) {\r\n    nrofpages.push(i + 1);\r\n  }\r\n  let pageCount = 0;\r\n  return (\r\n    <div className=\"pagination\">\r\n      {/*I used two type of arrows to increase or decrease page by 1 or by 3 each one with onclick that i get this \r\n      function as a prop becouse of accesing some other properties needed*/}\r\n      <div className=\"Paginationpages Symbols\" onClick={DecreasePageByThree}>\r\n        &laquo;\r\n      </div>\r\n      <div\r\n        //some times for  small parts i usally make inline styles saves me a bit of time\r\n        className=\"Paginationpages Symbols Lite\"\r\n        style={{ position: \"relative\", left: \"-1.5vw\" }}\r\n        onClick={DecreasePageByOne}\r\n      >\r\n        &lt;\r\n      </div>\r\n      {/*pagination logic pages in this case are generatelly based on array size*/}\r\n      {nrofpages.map((page) => {\r\n        //keep track of page number\r\n        pageCount++;\r\n        return nrofpages.length <= 10 ? (\r\n          //if pages are less than 10 i just want to display them all no need to pass on other conditions will ignore them all\r\n          <div\r\n            key={page}\r\n            className={`${\r\n              clickedPage === page\r\n                ? \"Paginationpages Numbers Clicked\"\r\n                : \"Paginationpages Numbers\"\r\n            }`}\r\n            id={page}\r\n            onClick={() => {\r\n              onClickOfPage(page);\r\n            }}\r\n          >\r\n            {page}\r\n          </div>\r\n        ) : // otherwise i want always to show page 1 2  and 3 becouse it will give user posibillity to go back to start\r\n        pageCount === 1 || pageCount === 2 || pageCount === 3 ? (\r\n          <div\r\n            key={page}\r\n            className={`${\r\n              clickedPage === page\r\n                ? \"Paginationpages Numbers Clicked\"\r\n                : \"Paginationpages Numbers\"\r\n            }`}\r\n            id={page}\r\n            onClick={() => {\r\n              onClickOfPage(page);\r\n            }}\r\n          >\r\n            {page}\r\n          </div>\r\n        ) : //then if clicked page is  greater than 6 i dont want to show page 4 and 5 but giving just some points that before those pages has some other pages\r\n        (pageCount === 4 && clickedPage >= 6) ||\r\n          (pageCount === 5 && clickedPage >= 6) ? (\r\n          <div key={page} className=\"Paginationpages Points\" id={page}>\r\n            .\r\n          </div>\r\n        ) : //then if clicked page is one of last six pages i want that user get acces to page 10 and 11 by showing them\r\n        clickedPage + 6 >= nrofpages.length &&\r\n          (pageCount === 10 || pageCount === 11) ? (\r\n          <div\r\n            key={page}\r\n            className={`${\r\n              clickedPage === page\r\n                ? \"Paginationpages Numbers Clicked\"\r\n                : \"Paginationpages Numbers\"\r\n            }`}\r\n            id={page}\r\n            onClick={() => {\r\n              onClickOfPage(page);\r\n            }}\r\n          >\r\n            {page}\r\n          </div>\r\n        ) : //then if clicked page is one of last nine pages i want that user to dont see pages 12 and 13 to give them again\r\n        //the look that are some pages between those\r\n\r\n        //Puting points will make the list of pages smaller and every single page accesible by the user it just make sure that if it is big number pagination user has acces\r\n        //Only in some pages and he needs to click on some pages to see others (user will user have acces on first 3 pages last 4 pages and some pages after the clicked pages)\r\n        //So whenever he click a page he will have acces to see some next pages or he could easily go back or go at the end\r\n        clickedPage + 9 >= nrofpages.length &&\r\n          (pageCount === 12 || pageCount === 13) ? (\r\n          <div key={page} className=\"Paginationpages Points\" id={page}>\r\n            .\r\n          </div>\r\n        ) : // i make sure that everytime user see 4 last pages in order if he want to go to the end\r\n        pageCount + 3 >= nrofpages.length ? (\r\n          <div\r\n            key={page}\r\n            className={`${\r\n              clickedPage === page\r\n                ? \"Paginationpages Numbers Clicked\"\r\n                : \"Paginationpages Numbers\"\r\n            }`}\r\n            id={page}\r\n            onClick={() => {\r\n              onClickOfPage(page);\r\n            }}\r\n          >\r\n            {page}\r\n          </div>\r\n        ) : pageCount >= 7 + clickedPage && pageCount <= 8 + clickedPage ? (\r\n          <div key={page} className=\"Paginationpages Points\" id={page}>\r\n            .\r\n          </div>\r\n        ) : pageCount <= 5 + clickedPage && pageCount + 2 >= clickedPage ? (\r\n          <div\r\n            key={page}\r\n            className={`${\r\n              clickedPage === page\r\n                ? \"Paginationpages Numbers Clicked\"\r\n                : \"Paginationpages Numbers\"\r\n            }`}\r\n            id={page}\r\n            onClick={() => {\r\n              onClickOfPage(page);\r\n            }}\r\n          >\r\n            {page}\r\n          </div>\r\n        ) : null;\r\n      })}\r\n\r\n      <div\r\n        className=\"Paginationpages Symbols Lite\"\r\n        style={{ position: \"relative\", left: \"1.5vw\" }}\r\n        onClick={IncreasePageByOne}\r\n      >\r\n        &gt;\r\n      </div>\r\n      <div className=\"Paginationpages Symbols\" onClick={IncreasePageByThree}>\r\n        &raquo;\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n"]},"metadata":{},"sourceType":"module"}