{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asjan\\\\Desktop\\\\Creatella\\\\src\\\\App.jsx\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { setFullArrayOfProducts, setDisplayedArrayOfProducts, setValueByName } from \"./redux/Shop/Shop.actions\";\nimport Filter from \"./components/Filter/Filter.component\";\nimport { toggleSpinner } from \"./redux/Spinner/Spinner.actions\";\nimport { setViewOfPage } from \"./redux/Page/Page.actions\";\nimport Spinner from \"./components/Spinner/spinner.component\";\nimport Product from \"./components/Product/Product.component\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.GetProducts = async () => {\n      //run Spinner\n      await this.props.toggleSpinner(); //start Api call\n\n      await axios.get(\"http://localhost:5000/products/?_pages=1&_limit=80\").then(response => {\n        //register  80 products to redux (80 becouse no need more for start and load faster)\n        this.props.setFullArrayOfProducts(response.data); // register products that we need to display to the user\n\n        this.props.setDisplayedArrayOfProducts(response.data.slice(0, 20)); //set Index to redux a variable that i use to keep truck of the product number shown to user\n\n        this.props.setValueByName({\n          name: \"Index\",\n          value: 20\n        });\n      }); //close spinner\n\n      await this.props.toggleSpinner(); // while user uses the pages full products will be registered not only (80)\n\n      axios.get(\"http://localhost:5000/products\").then(response => {\n        this.props.setFullArrayOfProducts(response.data);\n      });\n    };\n\n    this.handleScroll = async e => {\n      const {\n        Index,\n        setDisplayedArrayOfProducts,\n        DisplayedProductsArray,\n        ProductsFullArray\n      } = this.props;\n\n      if ( //Check when users reach the bottom\n      e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight && Index <= 481) {\n        await this.props.setValueByName({\n          name: \"LoadingMore\",\n          value: true\n        }); // Tell message to the user in ex \"Loading more\"\n\n        await this.props.setValueByName({\n          name: \"AddsIndexes\",\n          value: [...this.props.AddsIndexes, this.findRandomNotFirstAdd()]\n        }); // Set timeout so even if data come faster Loading will be shown to users for 1/3s just for design\n\n        await setTimeout(async () => {\n          await this.props.setValueByName({\n            name: \"Index\",\n            value: Index + 20\n          }); //Get more products from full array that i use in redux state\n\n          await setDisplayedArrayOfProducts(DisplayedProductsArray.concat(ProductsFullArray.slice(Index, Index + 20))); // Keep truck of index\n\n          await this.props.setValueByName({\n            name: \"Index\",\n            value: Index + 20\n          }); //Stop loading more\n\n          await this.props.setValueByName({\n            name: \"LoadingMore\",\n            value: false\n          }); //Check if all products have been displayed\n\n          if (Index <= ProductsFullArray.length && Index >= ProductsFullArray.length - 20) {\n            setDisplayedArrayOfProducts(ProductsFullArray);\n          }\n        }, 300);\n      }\n    };\n\n    this.findRandomNotFirstAdd = () => {\n      let zIndex = Math.floor(Math.random() * 1000);\n\n      while (zIndex == this.props.AddsIndexes[this.props.AddsIndexes.length - 1]) {\n        zIndex = Math.floor(Math.random() * 1000);\n      }\n\n      return zIndex;\n    };\n  }\n\n  componentDidMount() {\n    //Call function to get products when components load\n    this.GetProducts();\n  } //Handle Scrolling  to give more products\n\n\n  render() {\n    let ProductsCount = 0;\n    const {\n      DisplayedProductsArray,\n      SpinnerVissibility,\n      LoadingMore,\n      Index,\n      ProductsFullArray,\n      AddsIndexes,\n      ViewOfPage,\n      setViewOfPage\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Product, {\n      id: Product.id,\n      price: Product.price,\n      size: Product.size,\n      face: Product.face,\n      date: Product.date,\n      AddsIndexes: AddsIndexes,\n      ProductsCount: ProductsCount,\n      AdsVisibility: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }) // <div className=\"filter-Products-Header\">\n    //   <div className=\"Filter-Header\">\n    //     <Filter />\n    //   </div>\n    //   <div className=\"SwitchView\" onClick={setViewOfPage}>\n    //     {ViewOfPage === \"Pagination\"\n    //       ? \"Turn on Scrolling View\"\n    //       : \"Turn on Pagination View\"}\n    //   </div>\n    //   <div className=\"Products\" onScroll={this.handleScroll}>\n    //     {SpinnerVissibility === true ? (\n    //       <Spinner></Spinner>\n    //     ) : (\n    //       DisplayedProductsArray.map((Product) => {\n    //         ProductsCount++;\n    //         return ProductsCount % 20 == 0 ? (\n    //           <div>\n    //             <Product\n    //               id={Product.id}\n    //               price={Product.price}\n    //               size={Product.size}\n    //               face={Product.face}\n    //               date={Product.date}\n    //               AddsIndexes={AddsIndexes}\n    //               ProductsCount={ProductsCount}\n    //               AdsVisibility={true}\n    //             />\n    //           </div>\n    //         ) : (\n    //           <Product\n    //             id={Product.id}\n    //             price={Product.price}\n    //             size={Product.size}\n    //             face={Product.face}\n    //             date={Product.date}\n    //             AddsIndexes={AddsIndexes}\n    //             ProductsCount={ProductsCount}\n    //             AdsVisibility={false}\n    //           />\n    //         );\n    //       })\n    //     )}\n    //     {/* {LoadingMore === true ? (\n    //       <div className=\"LoadingMoreend\">Loading ...</div>\n    //     ) : null}\n    //     {Index != 0 && Index === ProductsFullArray.length ? (\n    //       <div className=\"LoadingMoreend\">end of catalogue</div>\n    //     ) : null} */}\n    //   </div>\n    // </div>\n    ;\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  DisplayedProductsArray: state.shop.DisplayedProductsArray,\n  ProductsFullArray: state.shop.ProductsFullArray,\n  Index: state.shop.Index,\n  LoadingMore: state.shop.LoadingMore,\n  SpinnerVissibility: state.spinner.SpinnerVissibility,\n  NoMoreToShow: state.shop.NoMoreToShow,\n  AddsIndexes: state.shop.AddsIndexes,\n  ViewOfPage: state.page.ViewOfPage\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setFullArrayOfProducts: FullArrayOfProducts => dispatch(setFullArrayOfProducts(FullArrayOfProducts)),\n  setDisplayedArrayOfProducts: DisplayedArrayOfProducts => dispatch(setDisplayedArrayOfProducts(DisplayedArrayOfProducts)),\n  toggleSpinner: () => dispatch(toggleSpinner()),\n  setValueByName: NameValue => dispatch(setValueByName(NameValue)),\n  setViewOfPage: () => dispatch(setViewOfPage())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["C:/Users/asjan/Desktop/Creatella/src/App.jsx"],"names":["React","axios","connect","setFullArrayOfProducts","setDisplayedArrayOfProducts","setValueByName","Filter","toggleSpinner","setViewOfPage","Spinner","Product","App","Component","GetProducts","props","get","then","response","data","slice","name","value","handleScroll","e","Index","DisplayedProductsArray","ProductsFullArray","target","scrollHeight","scrollTop","clientHeight","AddsIndexes","findRandomNotFirstAdd","setTimeout","concat","length","zIndex","Math","floor","random","componentDidMount","render","ProductsCount","SpinnerVissibility","LoadingMore","ViewOfPage","id","price","size","face","date","mapStateToProps","state","shop","spinner","NoMoreToShow","page","mapDispatchToProps","dispatch","FullArrayOfProducts","DisplayedArrayOfProducts","NameValue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setFullArrayOfProducts,\r\n  setDisplayedArrayOfProducts,\r\n  setValueByName,\r\n} from \"./redux/Shop/Shop.actions\";\r\nimport Filter from \"./components/Filter/Filter.component\";\r\nimport { toggleSpinner } from \"./redux/Spinner/Spinner.actions\";\r\nimport { setViewOfPage } from \"./redux/Page/Page.actions\";\r\nimport Spinner from \"./components/Spinner/spinner.component\";\r\nimport Product from \"./components/Product/Product.component\";\r\nclass App extends React.Component {\r\n  //Make Api call and get Products Info\r\n  GetProducts = async () => {\r\n    //run Spinner\r\n    await this.props.toggleSpinner();\r\n    //start Api call\r\n    await axios\r\n      .get(\"http://localhost:5000/products/?_pages=1&_limit=80\")\r\n      .then((response) => {\r\n        //register  80 products to redux (80 becouse no need more for start and load faster)\r\n        this.props.setFullArrayOfProducts(response.data);\r\n        // register products that we need to display to the user\r\n        this.props.setDisplayedArrayOfProducts(response.data.slice(0, 20));\r\n        //set Index to redux a variable that i use to keep truck of the product number shown to user\r\n        this.props.setValueByName({ name: \"Index\", value: 20 });\r\n      });\r\n    //close spinner\r\n    await this.props.toggleSpinner();\r\n    // while user uses the pages full products will be registered not only (80)\r\n    axios.get(\"http://localhost:5000/products\").then((response) => {\r\n      this.props.setFullArrayOfProducts(response.data);\r\n    });\r\n  };\r\n  componentDidMount() {\r\n    //Call function to get products when components load\r\n    this.GetProducts();\r\n  }\r\n  //Handle Scrolling  to give more products\r\n  handleScroll = async (e) => {\r\n    const {\r\n      Index,\r\n      setDisplayedArrayOfProducts,\r\n      DisplayedProductsArray,\r\n      ProductsFullArray,\r\n    } = this.props;\r\n\r\n    if (\r\n      //Check when users reach the bottom\r\n      e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight &&\r\n      Index <= 481\r\n    ) {\r\n      await this.props.setValueByName({\r\n        name: \"LoadingMore\",\r\n        value: true,\r\n      });\r\n      // Tell message to the user in ex \"Loading more\"\r\n      await this.props.setValueByName({\r\n        name: \"AddsIndexes\",\r\n        value: [...this.props.AddsIndexes, this.findRandomNotFirstAdd()],\r\n      });\r\n      // Set timeout so even if data come faster Loading will be shown to users for 1/3s just for design\r\n      await setTimeout(async () => {\r\n        await this.props.setValueByName({\r\n          name: \"Index\",\r\n          value: Index + 20,\r\n        });\r\n        //Get more products from full array that i use in redux state\r\n        await setDisplayedArrayOfProducts(\r\n          DisplayedProductsArray.concat(\r\n            ProductsFullArray.slice(Index, Index + 20)\r\n          )\r\n        );\r\n        // Keep truck of index\r\n        await this.props.setValueByName({\r\n          name: \"Index\",\r\n          value: Index + 20,\r\n        });\r\n        //Stop loading more\r\n        await this.props.setValueByName({\r\n          name: \"LoadingMore\",\r\n          value: false,\r\n        });\r\n        //Check if all products have been displayed\r\n        if (\r\n          Index <= ProductsFullArray.length &&\r\n          Index >= ProductsFullArray.length - 20\r\n        ) {\r\n          setDisplayedArrayOfProducts(ProductsFullArray);\r\n        }\r\n      }, 300);\r\n    }\r\n  };\r\n  findRandomNotFirstAdd = () => {\r\n    let zIndex = Math.floor(Math.random() * 1000);\r\n    while (\r\n      zIndex == this.props.AddsIndexes[this.props.AddsIndexes.length - 1]\r\n    ) {\r\n      zIndex = Math.floor(Math.random() * 1000);\r\n    }\r\n    return zIndex;\r\n  };\r\n  render() {\r\n    let ProductsCount = 0;\r\n\r\n    const {\r\n      DisplayedProductsArray,\r\n      SpinnerVissibility,\r\n      LoadingMore,\r\n      Index,\r\n      ProductsFullArray,\r\n      AddsIndexes,\r\n      ViewOfPage,\r\n      setViewOfPage,\r\n    } = this.props;\r\n    return (\r\n      <Product\r\n        id={Product.id}\r\n        price={Product.price}\r\n        size={Product.size}\r\n        face={Product.face}\r\n        date={Product.date}\r\n        AddsIndexes={AddsIndexes}\r\n        ProductsCount={ProductsCount}\r\n        AdsVisibility={false}\r\n      />\r\n      // <div className=\"filter-Products-Header\">\r\n      //   <div className=\"Filter-Header\">\r\n      //     <Filter />\r\n      //   </div>\r\n      //   <div className=\"SwitchView\" onClick={setViewOfPage}>\r\n      //     {ViewOfPage === \"Pagination\"\r\n      //       ? \"Turn on Scrolling View\"\r\n      //       : \"Turn on Pagination View\"}\r\n      //   </div>\r\n\r\n      //   <div className=\"Products\" onScroll={this.handleScroll}>\r\n      //     {SpinnerVissibility === true ? (\r\n      //       <Spinner></Spinner>\r\n      //     ) : (\r\n      //       DisplayedProductsArray.map((Product) => {\r\n      //         ProductsCount++;\r\n\r\n      //         return ProductsCount % 20 == 0 ? (\r\n      //           <div>\r\n      //             <Product\r\n      //               id={Product.id}\r\n      //               price={Product.price}\r\n      //               size={Product.size}\r\n      //               face={Product.face}\r\n      //               date={Product.date}\r\n      //               AddsIndexes={AddsIndexes}\r\n      //               ProductsCount={ProductsCount}\r\n      //               AdsVisibility={true}\r\n      //             />\r\n      //           </div>\r\n      //         ) : (\r\n      //           <Product\r\n      //             id={Product.id}\r\n      //             price={Product.price}\r\n      //             size={Product.size}\r\n      //             face={Product.face}\r\n      //             date={Product.date}\r\n      //             AddsIndexes={AddsIndexes}\r\n      //             ProductsCount={ProductsCount}\r\n      //             AdsVisibility={false}\r\n      //           />\r\n      //         );\r\n      //       })\r\n      //     )}\r\n      //     {/* {LoadingMore === true ? (\r\n      //       <div className=\"LoadingMoreend\">Loading ...</div>\r\n      //     ) : null}\r\n      //     {Index != 0 && Index === ProductsFullArray.length ? (\r\n      //       <div className=\"LoadingMoreend\">end of catalogue</div>\r\n      //     ) : null} */}\r\n      //   </div>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  DisplayedProductsArray: state.shop.DisplayedProductsArray,\r\n  ProductsFullArray: state.shop.ProductsFullArray,\r\n  Index: state.shop.Index,\r\n  LoadingMore: state.shop.LoadingMore,\r\n  SpinnerVissibility: state.spinner.SpinnerVissibility,\r\n  NoMoreToShow: state.shop.NoMoreToShow,\r\n  AddsIndexes: state.shop.AddsIndexes,\r\n  ViewOfPage: state.page.ViewOfPage,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setFullArrayOfProducts: (FullArrayOfProducts) =>\r\n    dispatch(setFullArrayOfProducts(FullArrayOfProducts)),\r\n  setDisplayedArrayOfProducts: (DisplayedArrayOfProducts) =>\r\n    dispatch(setDisplayedArrayOfProducts(DisplayedArrayOfProducts)),\r\n  toggleSpinner: () => dispatch(toggleSpinner()),\r\n  setValueByName: (NameValue) => dispatch(setValueByName(NameValue)),\r\n  setViewOfPage: () => dispatch(setViewOfPage()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n"]},"metadata":{},"sourceType":"module"}