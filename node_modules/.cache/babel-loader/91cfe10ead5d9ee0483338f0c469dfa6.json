{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asjan\\\\Desktop\\\\Creatella\\\\src\\\\components\\\\ProductScrollView\\\\ProductScrollView.component.jsx\";\nimport React from \"react\";\nimport Spinner from \"../Spinner/spinner.component\";\nimport { connect } from \"react-redux\";\nimport ProductCard from \"./components/Product/Product.component\";\nlet ProductsCount = 0;\n\nconst handleScroll = async (e, Index, setDisplayedArrayOfProducts, DisplayedProductsArray, ProductsFullArray) => {\n  if ( //Check when users reach the bottom\n  e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight && Index <= 481) {\n    await this.props.setValueByName({\n      name: \"LoadingMore\",\n      value: true\n    }); // Tell message to the user in ex \"Loading more\"\n\n    await this.props.setValueByName({\n      name: \"AddsIndexes\",\n      value: [...this.props.AddsIndexes, this.findRandomNotFirstAdd()]\n    }); // Set timeout so even if data come faster Loading will be shown to users for 1/3s just for design\n\n    await setTimeout(async () => {\n      await this.props.setValueByName({\n        name: \"Index\",\n        value: Index + 20\n      }); //Get more products from full array that i use in redux state\n\n      await setDisplayedArrayOfProducts(DisplayedProductsArray.concat(ProductsFullArray.slice(Index, Index + 20))); // Keep truck of index\n\n      await this.props.setValueByName({\n        name: \"Index\",\n        value: Index + 20\n      }); //Stop loading more\n\n      await this.props.setValueByName({\n        name: \"LoadingMore\",\n        value: false\n      }); //Check if all products have been displayed\n\n      if (Index <= ProductsFullArray.length && Index >= ProductsFullArray.length - 20) {\n        setDisplayedArrayOfProducts(ProductsFullArray);\n      }\n    }, 300);\n  }\n};\n\nconst ProductScrollView = ({\n  DisplayedProductsArray,\n  SpinnerVissibility,\n  AddsIndexes,\n  LoadingMore,\n  Index,\n  setDisplayedArrayOfProducts,\n  ProductsFullArray\n}) => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"Products\",\n  onScroll: e => {\n    handleScroll(e, Index, setDisplayedArrayOfProducts, DisplayedProductsArray, ProductsFullArray);\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }\n}, SpinnerVissibility === true ? /*#__PURE__*/React.createElement(Spinner, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 7\n  }\n}) : DisplayedProductsArray.map(Product => {\n  ProductsCount++;\n  return ProductsCount % 20 == 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ProductCard, {\n    id: Product.id,\n    price: Product.price,\n    size: Product.size,\n    face: Product.face,\n    date: Product.date,\n    AddsIndexes: AddsIndexes,\n    ProductsCount: ProductsCount,\n    AdsVisibility: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(ProductCard, {\n    id: Product.id,\n    price: Product.price,\n    size: Product.size,\n    face: Product.face,\n    date: Product.date,\n    AddsIndexes: AddsIndexes,\n    ProductsCount: ProductsCount,\n    AdsVisibility: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  });\n}), LoadingMore === true ? /*#__PURE__*/React.createElement(\"div\", {\n  className: \"LoadingMoreend\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 7\n  }\n}, \"Loading ...\") : null, Index != 0 && Index === ProductsFullArray.length ? /*#__PURE__*/React.createElement(\"div\", {\n  className: \"LoadingMoreend\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 7\n  }\n}, \"end of catalogue\") : null);\n\nconst mapStateToProps = state => ({\n  DisplayedProductsArray: state.shop.DisplayedProductsArray,\n  ProductsFullArray: state.shop.ProductsFullArray,\n  SpinnerVissibility: state.spinner.SpinnerVissibility,\n  AddsIndexes: state.shop.AddsIndexes,\n  Index: state.shop.Index,\n  LoadingMore: state.shop.LoadingMore\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setDisplayedArrayOfProducts: DisplayedArrayOfProducts => dispatch(setDisplayedArrayOfProducts(DisplayedArrayOfProducts))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductScrollView);","map":{"version":3,"sources":["C:/Users/asjan/Desktop/Creatella/src/components/ProductScrollView/ProductScrollView.component.jsx"],"names":["React","Spinner","connect","ProductCard","ProductsCount","handleScroll","e","Index","setDisplayedArrayOfProducts","DisplayedProductsArray","ProductsFullArray","target","scrollHeight","scrollTop","clientHeight","props","setValueByName","name","value","AddsIndexes","findRandomNotFirstAdd","setTimeout","concat","slice","length","ProductScrollView","SpinnerVissibility","LoadingMore","map","Product","id","price","size","face","date","mapStateToProps","state","shop","spinner","mapDispatchToProps","dispatch","DisplayedArrayOfProducts"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Spinner from \"../Spinner/spinner.component\";\r\nimport { connect } from \"react-redux\";\r\nimport ProductCard from \"./components/Product/Product.component\";\r\nlet ProductsCount = 0;\r\nconst handleScroll = async (\r\n  e,\r\n  Index,\r\n  setDisplayedArrayOfProducts,\r\n  DisplayedProductsArray,\r\n  ProductsFullArray\r\n) => {\r\n  if (\r\n    //Check when users reach the bottom\r\n    e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight &&\r\n    Index <= 481\r\n  ) {\r\n    await this.props.setValueByName({\r\n      name: \"LoadingMore\",\r\n      value: true,\r\n    });\r\n    // Tell message to the user in ex \"Loading more\"\r\n    await this.props.setValueByName({\r\n      name: \"AddsIndexes\",\r\n      value: [...this.props.AddsIndexes, this.findRandomNotFirstAdd()],\r\n    });\r\n    // Set timeout so even if data come faster Loading will be shown to users for 1/3s just for design\r\n    await setTimeout(async () => {\r\n      await this.props.setValueByName({\r\n        name: \"Index\",\r\n        value: Index + 20,\r\n      });\r\n      //Get more products from full array that i use in redux state\r\n      await setDisplayedArrayOfProducts(\r\n        DisplayedProductsArray.concat(\r\n          ProductsFullArray.slice(Index, Index + 20)\r\n        )\r\n      );\r\n      // Keep truck of index\r\n      await this.props.setValueByName({\r\n        name: \"Index\",\r\n        value: Index + 20,\r\n      });\r\n      //Stop loading more\r\n      await this.props.setValueByName({\r\n        name: \"LoadingMore\",\r\n        value: false,\r\n      });\r\n      //Check if all products have been displayed\r\n      if (\r\n        Index <= ProductsFullArray.length &&\r\n        Index >= ProductsFullArray.length - 20\r\n      ) {\r\n        setDisplayedArrayOfProducts(ProductsFullArray);\r\n      }\r\n    }, 300);\r\n  }\r\n};\r\nconst ProductScrollView = ({\r\n  DisplayedProductsArray,\r\n  SpinnerVissibility,\r\n  AddsIndexes,\r\n  LoadingMore,\r\n  Index,\r\n  setDisplayedArrayOfProducts,\r\n  ProductsFullArray,\r\n}) => (\r\n  <div\r\n    className=\"Products\"\r\n    onScroll={(e) => {\r\n      handleScroll(\r\n        e,\r\n        Index,\r\n        setDisplayedArrayOfProducts,\r\n        DisplayedProductsArray,\r\n        ProductsFullArray\r\n      );\r\n    }}\r\n  >\r\n    {SpinnerVissibility === true ? (\r\n      <Spinner></Spinner>\r\n    ) : (\r\n      DisplayedProductsArray.map((Product) => {\r\n        ProductsCount++;\r\n\r\n        return ProductsCount % 20 == 0 ? (\r\n          <div>\r\n            <ProductCard\r\n              id={Product.id}\r\n              price={Product.price}\r\n              size={Product.size}\r\n              face={Product.face}\r\n              date={Product.date}\r\n              AddsIndexes={AddsIndexes}\r\n              ProductsCount={ProductsCount}\r\n              AdsVisibility={true}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <ProductCard\r\n            id={Product.id}\r\n            price={Product.price}\r\n            size={Product.size}\r\n            face={Product.face}\r\n            date={Product.date}\r\n            AddsIndexes={AddsIndexes}\r\n            ProductsCount={ProductsCount}\r\n            AdsVisibility={false}\r\n          />\r\n        );\r\n      })\r\n    )}\r\n    {LoadingMore === true ? (\r\n      <div className=\"LoadingMoreend\">Loading ...</div>\r\n    ) : null}\r\n    {Index != 0 && Index === ProductsFullArray.length ? (\r\n      <div className=\"LoadingMoreend\">end of catalogue</div>\r\n    ) : null}\r\n  </div>\r\n);\r\nconst mapStateToProps = (state) => ({\r\n  DisplayedProductsArray: state.shop.DisplayedProductsArray,\r\n  ProductsFullArray: state.shop.ProductsFullArray,\r\n\r\n  SpinnerVissibility: state.spinner.SpinnerVissibility,\r\n  AddsIndexes: state.shop.AddsIndexes,\r\n  Index: state.shop.Index,\r\n  LoadingMore: state.shop.LoadingMore,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDisplayedArrayOfProducts: (DisplayedArrayOfProducts) =>\r\n    dispatch(setDisplayedArrayOfProducts(DisplayedArrayOfProducts)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductScrollView);\r\n"]},"metadata":{},"sourceType":"module"}