{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asjan\\\\Desktop\\\\Creatella\\\\src\\\\components\\\\Filter\\\\Filter.component.jsx\";\nimport React, { useState } from \"react\";\nimport \"./Filter.styles.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons\";\nimport Sort from \"../Sort/Sort.component\";\nimport { getData, ContrFunc } from \"../../api/AxiosHelperFunctions\";\nimport { connect } from \"react-redux\";\nimport { setFullArrayOfProducts, setDisplayedArrayOfProducts, setValueByName } from \"../../redux/Shop/Shop.actions\";\nimport { toggleSpinner } from \"../../redux/Spinner/Spinner.actions\"; //I have used a component Filter to handle filtering (in actual project sorting)\n\nconst Filter = ({\n  setFullArrayOfProducts,\n  setDisplayedArrayOfProducts,\n  setValueByName,\n  toggleSpinner\n}) => {\n  //4 Pieces of state (i usally dont underestimate state if i am sure that is only used in a single component)\n  // first piece is responsible for showing filter options (dropdown)\n  // 3 piece in which Each one responsible for each sort type\n  const [FilterState, setFilterState] = useState(false);\n  const [SizeSort, setSizeSort] = useState(false);\n  const [PrizeSort, setPrizeSort] = useState(false);\n  const [IdSort, setIdSort] = useState(false); // Function For Api request\n\n  const AxiosRequest = async ItemToSort => {\n    //Get 80 products (i have used this method for performance) so user fast get some result that he firstly need\n    await getData(ContrFunc.Functions.products, toggleSpinner, {\n      _sort: ItemToSort,\n      _limit: 80\n    }).then(response => {\n      //i assign this to my arrays in redux\n      //full data on FullArrayofProduct\n      setFullArrayOfProducts(response.data); //20 products on DisplayedArrayOfProducts becouse i display only 20 before scrolling or each page\n\n      setDisplayedArrayOfProducts(response.data.slice(0, 20)); //I keep track of index to show more items\n\n      setValueByName({\n        name: \"Index\",\n        value: 20\n      }); //And to be sure i make LoadingMore false i use it on scrolling\n\n      setValueByName({\n        name: \"LoadingMore\",\n        value: false\n      });\n    }); //After i get data and register on redux i toggleSpinner (stop initiated Spinner by getData my helper function)\n\n    await toggleSpinner(); //then without using spinner i load all products that may come some second\n    // later and register them on FullArrayProduct in redux(user wont understand it becouse no spinner )\n\n    await getData(ContrFunc.Functions.products, null, {\n      _sort: ItemToSort\n    }).then(response => {\n      setFullArrayOfProducts(response.data);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, FilterState === false ?\n  /*#__PURE__*/\n  //Filter Button\n  React.createElement(\"div\", {\n    className: \"Filtering\",\n    onClick: () => setFilterState(!FilterState),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"Filters\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faFilter,\n    className: \"icon\",\n    color: \"#413b3b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  })) :\n  /*#__PURE__*/\n  //In the time user presses it he will see also dropdown which will be show sorting types\n  React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    //Filter Button I have used it twice this could be also a small component\n    // but when i use it only iniside a signle component its not worth it to open new folders while u can use only onec copying\n    className: \"Filtering\",\n    onClick: () => setFilterState(!FilterState),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Filters\", /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faFilter,\n    className: \"icon\",\n    color: \"#413b3b\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"SortOption\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      fontSize: \"1.4vw\",\n      margin: \"1vh 1vw\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, \"Sort by: \")), /*#__PURE__*/React.createElement(Sort, {\n    onClick: () => AxiosRequest(\"id\"),\n    title: \"Id\",\n    sortVisibility: IdSort,\n    onClickOfSort: () => {\n      setSizeSort(false);\n      setPrizeSort(false);\n      setIdSort(true);\n      AxiosRequest(\"id\");\n      setFilterState(!FilterState);\n      setValueByName({\n        name: \"SortBy\",\n        value: \"id\"\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), \" \", /*#__PURE__*/React.createElement(Sort, {\n    onClick: () => AxiosRequest(\"price\"),\n    title: \"Prize\",\n    sortVisibility: PrizeSort,\n    onClickOfSort: () => {\n      setSizeSort(false);\n      setPrizeSort(true);\n      setIdSort(false);\n      AxiosRequest(\"price\");\n      setFilterState(!FilterState);\n      setValueByName({\n        name: \"SortBy\",\n        value: \"price\"\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Sort, {\n    title: \"Size\",\n    sortVisibility: SizeSort,\n    onClickOfSort: () => {\n      setSizeSort(true);\n      setPrizeSort(false);\n      setIdSort(false);\n      AxiosRequest(\"size\");\n      setFilterState(!FilterState);\n      setValueByName({\n        name: \"SortBy\",\n        value: \"size\"\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }), \" \")));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setFullArrayOfProducts: FullArrayOfProducts => dispatch(setFullArrayOfProducts(FullArrayOfProducts)),\n  setDisplayedArrayOfProducts: DisplayedArrayOfProducts => dispatch(setDisplayedArrayOfProducts(DisplayedArrayOfProducts)),\n  toggleSpinner: () => dispatch(toggleSpinner()),\n  setValueByName: NameValue => dispatch(setValueByName(NameValue))\n});\n\nexport default connect(null, mapDispatchToProps)(Filter);","map":{"version":3,"sources":["C:/Users/asjan/Desktop/Creatella/src/components/Filter/Filter.component.jsx"],"names":["React","useState","FontAwesomeIcon","faFilter","Sort","getData","ContrFunc","connect","setFullArrayOfProducts","setDisplayedArrayOfProducts","setValueByName","toggleSpinner","Filter","FilterState","setFilterState","SizeSort","setSizeSort","PrizeSort","setPrizeSort","IdSort","setIdSort","AxiosRequest","ItemToSort","Functions","products","_sort","_limit","then","response","data","slice","name","value","fontSize","margin","mapDispatchToProps","dispatch","FullArrayOfProducts","DisplayedArrayOfProducts","NameValue"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Filter.styles.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Sort from \"../Sort/Sort.component\";\r\n\r\nimport { getData, ContrFunc } from \"../../api/AxiosHelperFunctions\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  setFullArrayOfProducts,\r\n  setDisplayedArrayOfProducts,\r\n  setValueByName,\r\n} from \"../../redux/Shop/Shop.actions\";\r\nimport { toggleSpinner } from \"../../redux/Spinner/Spinner.actions\";\r\n//I have used a component Filter to handle filtering (in actual project sorting)\r\nconst Filter = ({\r\n  setFullArrayOfProducts,\r\n  setDisplayedArrayOfProducts,\r\n  setValueByName,\r\n  toggleSpinner,\r\n}) => {\r\n  //4 Pieces of state (i usally dont underestimate state if i am sure that is only used in a single component)\r\n  // first piece is responsible for showing filter options (dropdown)\r\n  // 3 piece in which Each one responsible for each sort type\r\n  const [FilterState, setFilterState] = useState(false);\r\n  const [SizeSort, setSizeSort] = useState(false);\r\n\r\n  const [PrizeSort, setPrizeSort] = useState(false);\r\n  const [IdSort, setIdSort] = useState(false);\r\n  // Function For Api request\r\n  const AxiosRequest = async (ItemToSort) => {\r\n    //Get 80 products (i have used this method for performance) so user fast get some result that he firstly need\r\n    await getData(ContrFunc.Functions.products, toggleSpinner, {\r\n      _sort: ItemToSort,\r\n      _limit: 80,\r\n    }).then((response) => {\r\n      //i assign this to my arrays in redux\r\n      //full data on FullArrayofProduct\r\n      setFullArrayOfProducts(response.data);\r\n      //20 products on DisplayedArrayOfProducts becouse i display only 20 before scrolling or each page\r\n      setDisplayedArrayOfProducts(response.data.slice(0, 20));\r\n      //I keep track of index to show more items\r\n      setValueByName({ name: \"Index\", value: 20 });\r\n      //And to be sure i make LoadingMore false i use it on scrolling\r\n      setValueByName({ name: \"LoadingMore\", value: false });\r\n    });\r\n    //After i get data and register on redux i toggleSpinner (stop initiated Spinner by getData my helper function)\r\n    await toggleSpinner();\r\n    //then without using spinner i load all products that may come some second\r\n    // later and register them on FullArrayProduct in redux(user wont understand it becouse no spinner )\r\n    await getData(ContrFunc.Functions.products, null, {\r\n      _sort: ItemToSort,\r\n    }).then((response) => {\r\n      setFullArrayOfProducts(response.data);\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      {/*If user hasent pressed Filter option it will be false and to the user will be shown only Button To Get Filter Dropdown If he presses*/}\r\n      {FilterState === false ? (\r\n        //Filter Button\r\n        <div className=\"Filtering\" onClick={() => setFilterState(!FilterState)}>\r\n          Filters\r\n          <FontAwesomeIcon\r\n            icon={faFilter}\r\n            className=\"icon\"\r\n            color=\"#413b3b\"\r\n          ></FontAwesomeIcon>\r\n        </div>\r\n      ) : (\r\n        //In the time user presses it he will see also dropdown which will be show sorting types\r\n        <div>\r\n          <div\r\n            //Filter Button I have used it twice this could be also a small component\r\n            // but when i use it only iniside a signle component its not worth it to open new folders while u can use only onec copying\r\n            className=\"Filtering\"\r\n            onClick={() => setFilterState(!FilterState)}\r\n          >\r\n            Filters\r\n            <FontAwesomeIcon\r\n              icon={faFilter}\r\n              className=\"icon\"\r\n              color=\"#413b3b\"\r\n            ></FontAwesomeIcon>\r\n          </div>\r\n          {/*Then Sort options Sort by id/size/price\r\n          Onclick of them i set state of one that is clicked tue and two other false make the request to change the product array displayed(this will cause refresh)\r\n          toggle FilterState  (false) to remove dropdown\r\n          And i also want to keep track if a sort has been used in redux state  i register it in a piece of state with name SortBy\r\n          */}\r\n          <div className=\"SortOption\">\r\n            <div style={{ fontSize: \"1.4vw\", margin: \"1vh 1vw\" }}>\r\n              {\" \"}\r\n              <b>Sort by: </b>\r\n            </div>\r\n            <Sort\r\n              onClick={() => AxiosRequest(\"id\")}\r\n              title=\"Id\"\r\n              sortVisibility={IdSort}\r\n              onClickOfSort={() => {\r\n                setSizeSort(false);\r\n                setPrizeSort(false);\r\n                setIdSort(true);\r\n                AxiosRequest(\"id\");\r\n                setFilterState(!FilterState);\r\n                setValueByName({\r\n                  name: \"SortBy\",\r\n                  value: \"id\",\r\n                });\r\n              }}\r\n            />{\" \"}\r\n            <Sort\r\n              onClick={() => AxiosRequest(\"price\")}\r\n              title=\"Prize\"\r\n              sortVisibility={PrizeSort}\r\n              onClickOfSort={() => {\r\n                setSizeSort(false);\r\n                setPrizeSort(true);\r\n                setIdSort(false);\r\n                AxiosRequest(\"price\");\r\n                setFilterState(!FilterState);\r\n                setValueByName({\r\n                  name: \"SortBy\",\r\n                  value: \"price\",\r\n                });\r\n              }}\r\n            />\r\n            <Sort\r\n              title=\"Size\"\r\n              sortVisibility={SizeSort}\r\n              onClickOfSort={() => {\r\n                setSizeSort(true);\r\n                setPrizeSort(false);\r\n                setIdSort(false);\r\n                AxiosRequest(\"size\");\r\n                setFilterState(!FilterState);\r\n                setValueByName({\r\n                  name: \"SortBy\",\r\n                  value: \"size\",\r\n                });\r\n              }}\r\n            />{\" \"}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setFullArrayOfProducts: (FullArrayOfProducts) =>\r\n    dispatch(setFullArrayOfProducts(FullArrayOfProducts)),\r\n  setDisplayedArrayOfProducts: (DisplayedArrayOfProducts) =>\r\n    dispatch(setDisplayedArrayOfProducts(DisplayedArrayOfProducts)),\r\n  toggleSpinner: () => dispatch(toggleSpinner()),\r\n  setValueByName: (NameValue) => dispatch(setValueByName(NameValue)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);\r\n"]},"metadata":{},"sourceType":"module"}