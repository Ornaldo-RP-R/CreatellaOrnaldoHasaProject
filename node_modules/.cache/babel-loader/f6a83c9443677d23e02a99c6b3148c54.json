{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asjan\\\\Desktop\\\\Creatella\\\\src\\\\components\\\\ProductScrollView\\\\ProductScrollView.component.jsx\";\nimport React from \"react\";\nimport Spinner from \"../Spinner/spinner.component\";\nimport { connect } from \"react-redux\";\nimport ProductCard from \"../Product/Product.component\";\nimport \"./ProductScrollView.styles.css\";\nimport { setDisplayedArrayOfProducts, setValueByName } from \"../../redux/Shop/Shop.actions\";\n\nconst findRandomNotFirstAdd = AddsIndexes => {\n  let zIndex = Math.floor(Math.random() * 1000);\n\n  while (zIndex === AddsIndexes[AddsIndexes.length - 1]) {\n    zIndex = Math.floor(Math.random() * 1000);\n  }\n\n  return zIndex;\n};\n\nconst handleScroll = async (e, Index, setDisplayedArrayOfProducts, DisplayedProductsArray, ProductsFullArray, AddsIndexes, setValueByName) => {\n  if ( //Check when users reach the bottom\n  e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight && Index <= 481) {\n    await setValueByName({\n      name: \"LoadingMore\",\n      value: true\n    }); // Tell message to the user in ex \"Loading more\"\n\n    await setValueByName({\n      name: \"AddsIndexes\",\n      value: [...AddsIndexes, findRandomNotFirstAdd(AddsIndexes)]\n    }); // Set timeout so even if data come faster Loading will be shown to users for 1/3s just for design\n\n    await setTimeout(async () => {\n      await setValueByName({\n        name: \"Index\",\n        value: Index + 20\n      }); //Get more products from full array that i use in redux state\n\n      await setDisplayedArrayOfProducts(DisplayedProductsArray.concat(ProductsFullArray.slice(Index, Index + 20))); // Keep truck of index\n\n      await setValueByName({\n        name: \"Index\",\n        value: Index + 20\n      }); //Stop loading more\n\n      await setValueByName({\n        name: \"LoadingMore\",\n        value: false\n      }); //Check if all products have been displayed\n\n      if (Index <= ProductsFullArray.length && Index >= ProductsFullArray.length - 20) {\n        setDisplayedArrayOfProducts(ProductsFullArray);\n      }\n    }, 300);\n  }\n};\n\nlet ProductsCount = 0;\n\nconst ProductScrollView = ({\n  DisplayedProductsArray,\n  SpinnerVissibility,\n  AddsIndexes,\n  LoadingMore,\n  Index,\n  setDisplayedArrayOfProducts,\n  ProductsFullArray,\n  setValueByName\n}) => {\n  ProductsCount = 0;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Products\",\n    onScroll: e => {\n      handleScroll(e, Index, setDisplayedArrayOfProducts, DisplayedProductsArray, ProductsFullArray, AddsIndexes, setValueByName);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, SpinnerVissibility === true ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }) : DisplayedProductsArray.map(Product => {\n    ProductsCount++;\n    return ProductsCount % 20 === 0 ? /*#__PURE__*/React.createElement(ProductCard, {\n      setValueByName: setValueByName,\n      key: Product.id,\n      id: Product.id,\n      price: Product.price,\n      size: Product.size,\n      face: Product.face,\n      date: Product.date,\n      AddsIndexes: AddsIndexes,\n      ProductsCount: ProductsCount,\n      AdsVisibility: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }) : /*#__PURE__*/React.createElement(ProductCard, {\n      setValueByName: setValueByName,\n      key: Product.id,\n      id: Product.id,\n      price: Product.price,\n      size: Product.size,\n      face: Product.face,\n      date: Product.date,\n      AddsIndexes: AddsIndexes,\n      ProductsCount: ProductsCount,\n      AdsVisibility: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    });\n  }), LoadingMore === true ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"LoadingMoreend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, \"Loading ...\") : null, Index !== 0 && Index === ProductsFullArray.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"LoadingMoreend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, \"end of catalogue\") : null);\n};\n\nconst mapStateToProps = state => ({\n  DisplayedProductsArray: state.shop.DisplayedProductsArray,\n  ProductsFullArray: state.shop.ProductsFullArray,\n  SpinnerVissibility: state.spinner.SpinnerVissibility,\n  AddsIndexes: state.shop.AddsIndexes,\n  Index: state.shop.Index,\n  LoadingMore: state.shop.LoadingMore\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setDisplayedArrayOfProducts: DisplayedArrayOfProducts => dispatch(setDisplayedArrayOfProducts(DisplayedArrayOfProducts)),\n  setValueByName: NameValue => dispatch(setValueByName(NameValue))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductScrollView);","map":{"version":3,"sources":["C:/Users/asjan/Desktop/Creatella/src/components/ProductScrollView/ProductScrollView.component.jsx"],"names":["React","Spinner","connect","ProductCard","setDisplayedArrayOfProducts","setValueByName","findRandomNotFirstAdd","AddsIndexes","zIndex","Math","floor","random","length","handleScroll","e","Index","DisplayedProductsArray","ProductsFullArray","target","scrollHeight","scrollTop","clientHeight","name","value","setTimeout","concat","slice","ProductsCount","ProductScrollView","SpinnerVissibility","LoadingMore","map","Product","id","price","size","face","date","mapStateToProps","state","shop","spinner","mapDispatchToProps","dispatch","DisplayedArrayOfProducts","NameValue"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Spinner from \"../Spinner/spinner.component\";\r\nimport { connect } from \"react-redux\";\r\nimport ProductCard from \"../Product/Product.component\";\r\nimport \"./ProductScrollView.styles.css\";\r\nimport {\r\n  setDisplayedArrayOfProducts,\r\n  setValueByName,\r\n} from \"../../redux/Shop/Shop.actions\";\r\nconst findRandomNotFirstAdd = (AddsIndexes) => {\r\n  let zIndex = Math.floor(Math.random() * 1000);\r\n  while (zIndex === AddsIndexes[AddsIndexes.length - 1]) {\r\n    zIndex = Math.floor(Math.random() * 1000);\r\n  }\r\n  return zIndex;\r\n};\r\nconst handleScroll = async (\r\n  e,\r\n  Index,\r\n  setDisplayedArrayOfProducts,\r\n  DisplayedProductsArray,\r\n  ProductsFullArray,\r\n  AddsIndexes,\r\n  setValueByName\r\n) => {\r\n  if (\r\n    //Check when users reach the bottom\r\n    e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight &&\r\n    Index <= 481\r\n  ) {\r\n    await setValueByName({\r\n      name: \"LoadingMore\",\r\n      value: true,\r\n    });\r\n    // Tell message to the user in ex \"Loading more\"\r\n    await setValueByName({\r\n      name: \"AddsIndexes\",\r\n      value: [...AddsIndexes, findRandomNotFirstAdd(AddsIndexes)],\r\n    });\r\n    // Set timeout so even if data come faster Loading will be shown to users for 1/3s just for design\r\n    await setTimeout(async () => {\r\n      await setValueByName({\r\n        name: \"Index\",\r\n        value: Index + 20,\r\n      });\r\n      //Get more products from full array that i use in redux state\r\n      await setDisplayedArrayOfProducts(\r\n        DisplayedProductsArray.concat(\r\n          ProductsFullArray.slice(Index, Index + 20)\r\n        )\r\n      );\r\n      // Keep truck of index\r\n      await setValueByName({\r\n        name: \"Index\",\r\n        value: Index + 20,\r\n      });\r\n      //Stop loading more\r\n      await setValueByName({\r\n        name: \"LoadingMore\",\r\n        value: false,\r\n      });\r\n      //Check if all products have been displayed\r\n      if (\r\n        Index <= ProductsFullArray.length &&\r\n        Index >= ProductsFullArray.length - 20\r\n      ) {\r\n        setDisplayedArrayOfProducts(ProductsFullArray);\r\n      }\r\n    }, 300);\r\n  }\r\n};\r\nlet ProductsCount = 0;\r\n\r\nconst ProductScrollView = ({\r\n  DisplayedProductsArray,\r\n  SpinnerVissibility,\r\n  AddsIndexes,\r\n  LoadingMore,\r\n  Index,\r\n  setDisplayedArrayOfProducts,\r\n  ProductsFullArray,\r\n  setValueByName,\r\n}) => {\r\n  ProductsCount = 0;\r\n\r\n  return (\r\n    <div\r\n      className=\"Products\"\r\n      onScroll={(e) => {\r\n        handleScroll(\r\n          e,\r\n          Index,\r\n          setDisplayedArrayOfProducts,\r\n          DisplayedProductsArray,\r\n          ProductsFullArray,\r\n          AddsIndexes,\r\n          setValueByName\r\n        );\r\n      }}\r\n    >\r\n      {SpinnerVissibility === true ? (\r\n        <Spinner></Spinner>\r\n      ) : (\r\n        DisplayedProductsArray.map((Product) => {\r\n          ProductsCount++;\r\n\r\n          return ProductsCount % 20 === 0 ? (\r\n            <ProductCard\r\n              setValueByName={setValueByName}\r\n              key={Product.id}\r\n              id={Product.id}\r\n              price={Product.price}\r\n              size={Product.size}\r\n              face={Product.face}\r\n              date={Product.date}\r\n              AddsIndexes={AddsIndexes}\r\n              ProductsCount={ProductsCount}\r\n              AdsVisibility={true}\r\n            />\r\n          ) : (\r\n            <ProductCard\r\n              setValueByName={setValueByName}\r\n              key={Product.id}\r\n              id={Product.id}\r\n              price={Product.price}\r\n              size={Product.size}\r\n              face={Product.face}\r\n              date={Product.date}\r\n              AddsIndexes={AddsIndexes}\r\n              ProductsCount={ProductsCount}\r\n              AdsVisibility={false}\r\n            />\r\n          );\r\n        })\r\n      )}\r\n      {LoadingMore === true ? (\r\n        <div className=\"LoadingMoreend\">Loading ...</div>\r\n      ) : null}\r\n      {Index !== 0 && Index === ProductsFullArray.length ? (\r\n        <div className=\"LoadingMoreend\">end of catalogue</div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  DisplayedProductsArray: state.shop.DisplayedProductsArray,\r\n  ProductsFullArray: state.shop.ProductsFullArray,\r\n\r\n  SpinnerVissibility: state.spinner.SpinnerVissibility,\r\n  AddsIndexes: state.shop.AddsIndexes,\r\n  Index: state.shop.Index,\r\n  LoadingMore: state.shop.LoadingMore,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDisplayedArrayOfProducts: (DisplayedArrayOfProducts) =>\r\n    dispatch(setDisplayedArrayOfProducts(DisplayedArrayOfProducts)),\r\n  setValueByName: (NameValue) => dispatch(setValueByName(NameValue)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductScrollView);\r\n"]},"metadata":{},"sourceType":"module"}